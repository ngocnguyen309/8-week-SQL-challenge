--1 How many pizzas were ordered?
SELECT COUNT(pizza_id) 
FROM pizza_runner.customer_orders;

--2 How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) 
FROM pizza_runner.customer_orders;

--3 How many successful orders were delivered by each runner?
SELECT runner_id, 
       COUNT(*) AS total_order
FROM pizza_runner.runner_orders
WHERE distance IS NOT NULL
GROUP BY runner_id;

--4 How many of each type of pizza was delivered?
SELECT pizza_name, 
       COUNT (p.pizza_id)
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
JOIN pizza_runner.pizza_names AS p
ON p.pizza_id=c.pizza_id
WHERE distance IS NOT NULL
GROUP BY pizza_name;

--5 How many Vegetarian and Meatlovers were ordered by each customer?
SELECT customer_id, 
       SUM (CASE WHEN c.pizza_id=1 THEN 1 ELSE 0 END) AS Meat_Lovers, 
       SUM (CASE WHEN c.pizza_id=2 THEN 1 ELSE 0 END) AS Vegetarian
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
JOIN pizza_runner.pizza_names AS p
ON p.pizza_id=c.pizza_id
GROUP BY customer_id
ORDER BY customer_id;

--6 What was the maximum number of pizzas delivered in a single order?
SELECT r.order_id, 
       COUNT (pizza_id) as number_pizzas
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
WHERE distance IS NOT NULL
GROUP BY r.order_id
ORDER BY COUNT (pizza_id) DESC;

--7 For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
WITH pizza_change AS 
(
SELECT customer_id, 
       pizza_id, 
       r.order_id, 
       COALESCE(exclusions,'') AS exclusions_after, 
       COALESCE(extras,'') AS extras_after
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
WHERE distance IS NOT NULL
)

SELECT customer_id, 
       order_id, 
       SUM(CASE WHEN exclusions_after='' AND extras_after='' THEN 1 
       ELSE 0 END) AS no_changes, 
       SUM(CASE WHEN exclusions_after <>'' OR extras_after <>''THEN 1 
       ELSE 0 END) AS had_atleast_1
FROM pizza_change
GROUP BY customer_id, order_id
ORDER BY customer_id;

--8 How many pizzas were delivered that had both exclusions and extras?
WITH pizza_both AS 
(
SELECT customer_id, 
       pizza_id, 
       r.order_id, 
       COALESCE(exclusions,'') AS exclusions_after, 
       COALESCE(extras,'') AS extras_after
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
WHERE distance IS NOT NULL
)

SELECT customer_id, 
       order_id, 
       COUNT(DISTINCT pizza_id) AS both
FROM pizza_both
WHERE (exclusions_after <> '' 
AND extras_after<>'')
GROUP BY customer_id, order_id;

--9 What was the total volume of pizzas ordered for each hour of the day?
SELECT DATE_PART('hour',order_time) AS hours, 
       COUNT(*) AS number_pizzas
FROM pizza_runner.customer_orders
GROUP BY DATE_PART('hour',order_time);

--10. What was the volume of orders for each day of the week?
SELECT DATE_PART('day',order_time) AS days, 
       COUNT(DISTINCT order_id) AS number_pizzas
FROM pizza_runner.customer_orders
GROUP BY DATE_PART('day',order_time)
ORDER BY DATE_PART('day',order_time);

B. Runner and Customer Experience
--1 How many runners signed up for each 1 week period?
SELECT DATEPART(week, CAST(registration_date AS date)) AS weeks, 
       COUNT(runner_id) AS total
FROM runners
GROUP BY DATEPART(week, CAST(registration_date AS date))
--One runner registered in the first week
--2 runners registered in the second week
--one runner registered in the third week

--2 What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
WITH average_time AS 
(
SELECT runner_id, 
       CAST(pickup_time AS datetime) AS pickup_times, 
       CAST(order_time AS datetime) AS order_times
FROM runner_orders AS r
JOIN customer_orders AS c
ON r.order_id=c.order_id
WHERE distance <> ''
)
SELECT runner_id, 
       AVG(DATEDIFF(minute, order_times, pickup_times)) AS mintues
FROM average_time
GROUP BY runner_id
-- It took runner_id 1 15 minutes to arrive at the Pizza Runner HQ to pickup order
-- It took runner_id 2 24 minutes to arrive at the Pizza Runner HQ to pickup order
-- It took runner_id 3 10 minutes to arrive at the Pizza Runner HQ to pickup order

--3 Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH da AS
(
SELECT r.order_id, 
       COUNT(pizza_id) AS number_pizzas, 
       CAST(pickup_time AS datetime) AS pickup_times, cast(order_time as datetime) as order_times
FROM runner_orders AS r
JOIN customer_orders AS c
ON r.order_id=c.order_id
WHERE distance <> ''
GROUP BY r.order_id, 
         pickup_time, 
         order_time)
SELECT number_pizzas, 
       AVG(DATEDIFF(minute, order_times, pickup_times)) AS minutes
FROM da
GROUP BY number_pizzas
/* When the number of pizzas in a order increase, time to prepare per pizza tend to decrease. For example, it takes 10 minutes to prepare one pizza.
it takes 18 minutes to prepare 2 pizzas that means staff need to spend 9 minutes per pizza.*/

--4 What was the average distance travelled for each customer?
SELECT customer_id, 
       ROUND(AVG(CAST(distance AS float)),2) AS avg_distance
FROM runner_orders AS r
JOIN customer_orders AS c
ON r.order_id=c.order_id
GROUP BY customer_id
--Customer_id 105 has greatest distance from the Pizza Runner HQ 
--Customer_id 104 stays nearest the Pizza Runner HQ

--5 What was the difference between the longest and shortest delivery times for all orders?
select max(cast(duration as float))-min(cast(duration as float)) as dif_delivery_times
from runner_orders
/* The difference between the longest and shortest delivery time for all orders was 40 minutes*/

#6
select runner_id, avg(cast(distance as float)/cast (duration as float)) as average_speed
from runner_orders
where duration<>''
group by runner_id
order by avg(cast(distance as float)/cast (duration as float)) desc
/* runner 2 has the largest average speed with 1.04 km/ph and runner 3 has the smallest average speed with 0.66 km/ph*/
/* when the average distance travelled for each customer increase, runner tend to increase their average speed/

--7 What is the successful delivery percentage for each runner?
SELECT runner_id, 
       CAST(SUM(CASE WHEN duration ='' THEN 0 ELSE 1 END) AS float)/CAST(COUNT(order_id) AS float)*100 AS percentage
FROM runner_orders
GROUP BY runner_id
--runner id 1 has 100%
--runner 2 has 75% sucessful delivery
Ingredient Optimisation




#1
select count(c.pizza_id) as pizzas, SUM (case when c.pizza_id=1 then 12 else 10 end) as total
from customer_orders as c
join runner_orders as r
on c.order_id=r.order_id
where distance<>''
/* If there are no delivery fees, Pizza Runner has made $138 for 12 pizzas so far*/
