1. How many customers has Foodie-Fi ever had?

SELECT COUNT(DISTINCT customer_id)
FROM foodie_fi.subscriptions 

2. What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value?

SELECT TO_CHAR(start_date,'Mon') AS month,
       COUNT(s.plan_id) AS quantity
FROM foodie_fi.plans AS p
JOIN foodie_fi.subscriptions AS s
ON p.plan_id=s.plan_id
WHERE s.plan_id=0
GROUP BY DATE_TRUNC('month',start_date), TO_CHAR(start_date,'Mon')
ORDER BY DATE_TRUNC('month',start_date)

3. What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name?

SELECT plan_name,
       COUNT(s.plan_id) AS events
FROM foodie_fi.plans AS p
JOIN foodie_fi.subscriptions AS s
ON p.plan_id=s.plan_id
GROUP BY DATE_PART('year',start_date), plan_name
HAVING DATE_PART('year',start_date) > 2020
ORDER BY COUNT(s.plan_id) DESC

4. What is the customer count and percentage of customers who have churned rounded to 1 decimal place?

SELECT COUNT(s.customer_id) AS customer_churn,
       ROUND((COUNT(s.customer_id) :: NUMERIC/(SELECT COUNT(distinct customer_id) FROM foodie_fi.subscriptions)),1) AS churn_rate
FROM foodie_fi.plans AS p
JOIN foodie_fi.subscriptions AS s
ON p.plan_id=s.plan_id
WHERE s.plan_id=4

5. How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?

WITH churn_trial AS
(
SELECT customer_id,
       plan_id,
       ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY plan_id) AS rank_number
FROM foodie_fi.subscriptions)

SELECT COUNT(customer_id) AS churn_after_trial,
       ROUND((100*COUNT(customer_id) :: NUMERIC/(SELECT COUNT(DISTINCT customer_id) FROM churn_trial))) AS churn_rate
FROM churn_trial AS c
JOIN foodie_fi.plans AS p
ON c.plan_id=p.plan_id
WHERE c.plan_id=4
AND rank_number=2

6. What is the number and percentage of customer plans after their initial free trial?

WITH after_trial AS
(
SELECT customer_id,
       plan_id,
       LEAD(plan_id) OVER(PARTITION BY customer_id ORDER BY plan_id) AS next_plan
FROM foodie_fi.subscriptions
)

SELECT next_plan, 
       COUNT(customer_id) AS customer,
       ROUND((100*COUNT(customer_id):: NUMERIC/(SELECT COUNT(DISTINCT customer_id) FROM foodie_fi.subscriptions)),3) AS percentage
FROM after_trial
GROUP BY next_plan
HAVING next_plan IS NOT NULL
ORDER BY next_plan

7. What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?

WITH after_trial AS
(
SELECT customer_id,
       plan_id,
  	start_date
FROM foodie_fi.subscriptions
)

SELECT a.plan_id, 
	   plan_name, 
       COUNT(customer_id) AS customer,
       ROUND((100*COUNT(customer_id)::NUMERIC/(SELECT COUNT(DISTINCT customer_id) FROM after_trial)),2) AS percentage
FROM after_trial AS a
JOIN foodie_fi.plans AS p
ON a.plan_id=p.plan_id
WHERE start_date<='2020-12-31'
GROUP BY a.plan_id, plan_name
ORDER BY a.plan_id

8. How many customers have upgraded to an annual plan in 2020?

SELECT COUNT(DISTINCT customer_id)
FROM foodie_fi.subscriptions
WHERE DATE_PART('year',start_date)=2020
AND plan_id=3

9. How many days on average does it take for a customer to an annual plan from the day they join Foodie-Fi?

WITH trial AS
(
SELECT customer_id, 
       plan_id, 
       start_date
FROM foodie_fi.subscriptions
WHERE plan_id=0),
annual AS
(
SELECT customer_id, 
       plan_id, 
       start_date AS annual_date
FROM foodie_fi.subscriptions
WHERE plan_id=3)

SELECT ROUND(AVG(annual_date-start_date),2) AS average_day
FROM trial AS t
JOIN annual AS a
ON t.customer_id=a.customer_id

10. Can you further breakdown this average value into 30 day periods (i.e. 0-30 days, 31-60 days etc)

WITH trial AS
(
SELECT customer_id, 
       plan_id, 
       start_date
FROM foodie_fi.subscriptions
WHERE plan_id=0
),
annual AS
(
SELECT customer_id, 
       plan_id, 
       start_date AS annual_date
FROM foodie_fi.subscriptions
WHERE plan_id=3
),
bin AS
(
SELECT WIDTH_BUCKET(annual_date - start_date, 0, 360, 12) AS period
FROM trial AS t
JOIN annual AS a
ON t.customer_id = a.customer_id
)

SELECT ((period-1)*30 || '-' || period*30 ||' '||'days') AS period_day, 
       COUNT(period)
FROM bin
GROUP BY period

10. How many customers downgraded from a pro monthly to a basic monthly plan in 2020?

WITH basic_monthly AS
(
SELECT customer_id, 
       plan_id, 
       start_date
FROM foodie_fi.subscriptions
WHERE plan_id=1
),
pro_monthly AS
(
SELECT customer_id, 
       plan_id, 
       start_date AS pro_date
FROM foodie_fi.subscriptions
WHERE plan_id=2
)

SELECT COUNT(b.customer_id)
FROM basic_monthly AS b
JOIN pro_monthly AS p
ON b.customer_id=p.customer_id
WHERE start_date>pro_date
AND DATE_PART('year', start_date)=2020
