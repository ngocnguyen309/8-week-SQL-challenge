#1
SELECT COUNT(pizza_id) 
FROM pizza_runner.customer_orders;
/*There are 14 pizzas ordered by customers at the restaurant*/

#2
SELECT COUNT(DISTINCT order_id) 
FROM pizza_runner.customer_orders;
/* 10 unique orders are made*/

#3
SELECT runner_id, 
       COUNT(*) AS total_order
FROM pizza_runner.runner_orders
WHERE distance IS NOT NULL
GROUP BY runner_id;
/* id_1 delivered 4 sucessful orders; 3 orders was delivered sucessfully by id_2; id_3 delivered only 1 sucessful order*/

#4
SELECT pizza_name, 
       COUNT (p.pizza_id)
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
JOIN pizza_runner.pizza_names AS p
ON p.pizza_id=c.pizza_id
WHERE distance IS NOT NULL
GROUP BY pizza_name;
/* 9 Pizza "MeatLovers" and 3 Pizza "Vegetatrian" were delivered sucessfully to customers*/

#5
SELECT customer_id, 
       SUM (CASE WHEN c.pizza_id=1 THEN 1 ELSE 0 END) AS Meat_Lovers, 
       SUM (CASE WHEN c.pizza_id=2 THEN 1 ELSE 0 END) AS Vegetarian
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
JOIN pizza_runner.pizza_names AS p
ON p.pizza_id=c.pizza_id
GROUP BY customer_id
ORDER BY customer_id;
/* customer_id 101 ordered 2 pizza "Meatlovers" and 1 pizza "Vegetarian"; customer_id 102 ordered 2 pizza "Meatlovers" and 1 pizza "Vegetarian";
customer_id 103 ordered 3 pizza "Meatlovers" and 1 pizza "Vegetarian"; customer_id 104 ordered 3 pizza "Meatlovers" and finnaly, customer_id 105 order 1 pizza"Vegetarian"*/

#6
SELECT r.order_id, 
       COUNT (pizza_id)
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
WHERE distance IS NOT NULL
GROUP BY r.order_id
ORDER BY COUNT (pizza_id) DESC;
/* The maximum number of pizzas delivered in a single order were 3 pizzas*/

#7
WITH da AS 
(
SELECT customer_id, 
       pizza_id, 
       r.order_id, 
       COALESCE(exclusions,'') AS exclusions_after, 
       COALESCE(extras,'') AS extras_after
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
WHERE distance IS NOT NULL
)

SELECT customer_id, 
       order_id, 
       SUM(CASE WHEN exclusions_after='' AND extras_after='' THEN 1 ELSE 0 END) AS no_changes, 
       SUM(CASE WHEN exclusions_after <>'' OR extras_after <>''THEN 1 ELSE 0 END) AS had_1_changes
FROM da
GROUP BY customer_id, order_id
ORDER BY customer_id;

customer_id	no_changes	had_1_changes
101	            2	           0
102	            3	           0
103	            0	           3
104	            1	           2
105	            0	           1

#8
WITH da AS 
(
SELECT customer_id, 
       pizza_id, 
       r.order_id, 
       COALESCE(exclusions,'') AS exclusions_after, 
       COALESCE(extras,'') AS extras_after
FROM pizza_runner.runner_orders AS r
JOIN pizza_runner.customer_orders AS c
ON r.order_id=c.order_id
WHERE distance IS NOT NULL
)

SELECT customer_id, 
       order_id, 
       COUNT(DISTINCT pizza_id) AS both
FROM da
WHERE (exclusions_after <> '' 
AND extras_after<>'')
GROUP BY customer_id, order_id;
/* Only order #10 of customer_id 103 had both exclusions and extras*/

#9
SELECT DATE_PART('hour',order_time) AS hours, 
       COUNT(*) AS number_pizzas
FROM pizza_runner.customer_orders
GROUP BY DATE_PART('hour',order_time)
ORDRE BY DATE_PART('hour',order_time);

#10. What was the volume of orders for each day of the week?
SELECT DATE_PART('day',order_time) AS days, 
       COUNT(DISTINCT order_id) AS number_pizzas
FROM pizza_runner.customer_orders
GROUP BY DATE_PART('day',order_time)
ORDER BY DATE_PART('day',order_time);

B. Runner and Customer Experience
#1
SELECT DATEPART(week, CAST(registration_date AS date)) AS weeks, 
       COUNT(runner_id) AS total
FROM runners
GROUP BY DATEPART(week, CAST(registration_date AS date))
/* One runner registered in the first week, 2 runners registered in the second week and one runner registered in the third week*/

#2
WITH da AS 
(
SELECT runner_id, 
       CAST(pickup_time AS datetime) AS pickup_times, 
       CAST(order_time AS datetime) AS order_times
FROM runner_orders AS r
JOIN customer_orders AS c
ON r.order_id=c.order_id
WHERE distance <> ''
)
SELECT runner_id, 
       AVG(DATEDIFF(minute, order_times, pickup_times)) AS mintues
FROM da
GROUP BY runner_id
/* It took runner_id 1 15 minutes to arrive at the Pizza Runner HQ to pickup order*/
/* It took runner_id 2 24 minutes to arrive at the Pizza Runner HQ to pickup order*/
/* It took runner_id 3 10 minutes to arrive at the Pizza Runner HQ to pickup order*/

#3
WITH da AS
(
SELECT r.order_id, 
       COUNT(pizza_id) AS number_pizzas, 
       CAST(pickup_time AS datetime) AS pickup_times, cast(order_time as datetime) as order_times
from runner_orders as r
join customer_orders as c
on r.order_id=c.order_id
where distance <> ''
group by r.order_id, pickup_time, order_time)
select number_pizzas, avg(datediff(minute,order_times,pickup_times)) as minutes
from da
group by number_pizzas
/* When the number of pizzas in a order increase, time to prepare per pizza tend to decrease. For example, it takes 10 minutes to prepare one pizza.
it takes 18 minutes to prepare 2 pizzas that means staff need to spend 9 minutes per pizza.*/

#4
select customer_id, round(avg(cast(distance as float)),2) as avg_distance
from runner_orders as r
join customer_orders as c
on r.order_id=c.order_id
group by customer_id
/*Customer_id 105 has greatest distance from the Pizza Runner HQ and customer_id 104 stays nearest the Pizza Runner HQ*/

#5
select max(cast(duration as float))-min(cast(duration as float)) as dif_delivery_times
from runner_orders
/* The difference between the longest and shortest delivery time for all orders was 40 minutes*/

#6
select runner_id, avg(cast(distance as float)/cast (duration as float)) as average_speed
from runner_orders
where duration<>''
group by runner_id
order by avg(cast(distance as float)/cast (duration as float)) desc
/* runner 2 has the largest average speed with 1.04 km/ph and runner 3 has the smallest average speed with 0.66 km/ph*/
/* when the average distance travelled for each customer increase, runner tend to increase their average speed/

#7
select runner_id, cast(sum(case when duration ='' then 0 else 1 end) as float)/cast(count(order_id) as float)*100 as percentage
from runner_orders
group by runner_id
/* The sucessful delivery percentage of runner id 1 is 100%, runner 2 has sucessful delivery propotion about 75% */

Ingredient Optimisation




#1
select count(c.pizza_id) as pizzas, SUM (case when c.pizza_id=1 then 12 else 10 end) as total
from customer_orders as c
join runner_orders as r
on c.order_id=r.order_id
where distance<>''
/* If there are no delivery fees, Pizza Runner has made $138 for 12 pizzas so far*/
